const HttpError = require('../models/http-error');
const fs = require('fs');
// const uuid = require('uuid/v4');//v4 creates a unique id with timestamp in it.
const { validationResult } = require('express-validator');
const getCoordsForAddress = require('../util/location');
const Place = require('../models/place');
const User = require('../models/user');
const mongoose = require('mongoose');


const getPlaceById = async (req, res, next) => {
    const placeId = req.params.pid;//get the pid in Url.eg=> api/places/p1->pid
    let place;
    try {
        place = await Place.findById(placeId);
    } catch (err) {
        const error = new HttpError(
            'Something went wrong,could not find a place.', 500
        )
        return next(error);
    }
    if (!place) {
        const error = new HttpError(
            'Could not find a place for provided user id.', 404
        );
        return next(error);
    }
    /* Here we are using toObject to convert place from json to object &
    getters allows us to remove underscore from properties inside the
    object here the id property generated by mongoose has underscore it
    will remove it. */
    res.json({ place: place.toObject({ getters: true }) });
};

const getPlacesByUserId = async (req, res, next) => {
    const userId = req.params.uid;
    let places;
    try {
        /* find method is use find a specific property in the response */
        places = await Place.find({ creator: userId });
    } catch (err) {
        const error = new HttpError(
            'Fetching places failed,please try again later', 500
        )
        return next(error);
    }
    if (!places || places.length === 0) {
        return next(
            new HttpError(
                'Could not find places for provided user id.', 404
            )
        ); // we have to return this coz throw breaks the code execution while next doesn't.

    }
    res.json({
        /* here we didn't directly convert places to object coz find 
        returns an array */
        places: places.map(place => place.toObject({ getters: true }))
    });
};
const createPlace = async (req, res, next) => {
    /* ValidationResult method will return us a object if createPlace's 
    request body don't pass the check validation we have registered in 
    places routes as arguments.*/
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
        console.log(errors);
        /* When working with async function we use next instead of throw. */
        return next(new HttpError(
            'Invalid inputs passed,please check your data', 422
        ));
    }
    const { title, description, address, creator } = req.body;
    let coordinates;
    try {
        coordinates = await getCoordsForAddress(address);
    } catch (error) {
        return next(error);
    }
    const createdPlace = new Place({
        title,
        description,
        address,
        location: coordinates,
        image: req.file.path,
        creator
    });
    let user;
    try {
        user = await User.findById(creator)
    } catch (err) {
        const error = new HttpError(
            'Creating place failed ,Please try again later',
            500
        );
        return next(error);
    }

    if (!user) {
        const error = new HttpError(
            'Could not find user for provided id',
            404
        );
        return next(error);
    }

    try {/*Remember to create collection manually
        in your database by mongoDB atlas when working with 
        transaction.*/
        const sess = await mongoose.startSession();
        sess.startTransaction();
        await createdPlace.save({ session: sess });
        user.places.push(createdPlace);
        await user.save({ session: sess });
        await sess.commitTransaction();
    } catch (err) {
        const error = new HttpError(
            'Creating place failed,please try again.',
            500
        );
        return next(error);
    }

    /* status code 201 is returned when we created something new. */
    res.status(201).json({ place: createdPlace });
};

const updatePlace = async (req, res, next) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
        console.log(errors);
        return next(
            new HttpError(
                'Invalid inputs passed,please check your data', 422
            )
        )
    }
    const { title, description } = req.body;
    const placeId = req.params.pid;
    // /* By Using spread opertator we have created a copy of Dummy places
    //  & by this we will make changes on to the copy not the original array.*/
    // const updatedPlace = { ...DUMMY_PLACES.find(p => p.id === placeId) };
    // const placeIndex = DUMMY_PLACES.findIndex(p => p.id === placeId);
    let place;
    try {
        place = await Place.findById(placeId);
    } catch (err) {
        const error = new HttpError(
            'Something went wrong,could not update place',
            500
        );
        return next(error);
    }
    place.title = title;
    place.description = description;
    try {
        await place.save()
    } catch (err) {
        const error = new HttpError(
            'Something went wrong,could not update place',
            500
        );
        return next(error);
    }
    // DUMMY_PLACES[placeIndex] = updatedPlace;
    res.status(200).json({ place: place.toObject({ getters: true }) });
}

const deletePlace = async (req, res, next) => {
    const placeId = req.params.pid;
    let place;
    try {/* by populate method mongoose can access entire obj in 
        another collection here creator points to user */
        place = await Place.findById(placeId).populate('creator');
    } catch (err) {
        const error = new HttpError(
            'Something went wrong,could not delete place',
            500
        );
        return next(error);
    }
    if (!place) {
        const error = new HttpError(
            'Could not find this place id',
            404
        )
        return next(error);
    }

    const imagePath = place.image;
    try {
        const sess = await mongoose.startSession();
        sess.startTransaction();
        await place.remove({ session: sess })
        place.creator.places.pull(place);
        await place.creator.save({ session: sess });
        await sess.commitTransaction();
    } catch (err) {
        const error = new HttpError(
            'Something went wrong,could not delete place',
            500
        );
        return next(error);
    }
    fs.unlink(imagePath, err => {
        console.log(err);
    })
    res.status(200).json({ message: 'Deleted place' })
}


/* We use this below syntax when we have to use reference of 
         these functions in other components/files .*/
exports.getPlaceById = getPlaceById;
exports.getPlacesByUserId = getPlacesByUserId;
exports.createPlace = createPlace;
exports.updatePlace = updatePlace;
exports.deletePlace = deletePlace;